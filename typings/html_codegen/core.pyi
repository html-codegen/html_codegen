"""
This type stub file was generated by pyright.
"""

from pathlib import Path
from typing import Callable, Optional

"""
Этот модуль содержит классы HTMLNode и HTML для создания иерархии узлов HTML-документа.
Класс HTMLNode представляет узел дерева, а HTML - элемент HTML-документа, наследуемый от HTMLNode.
В коде есть методы для добавления узлов, определения родительского элемента и корня,
а также сохранения HTML-документа в файл.

Класс HTMLNode также реализует контекстный менеджер, который создает блоки кода с помощью оператора with.
Когда создается экземпляр HTMLNode внутри блока with, он добавляется в стек контекста текущего потока выполнения.
При выходе из блока with все элементы текущего контекста удаляются из стека
и добавляются как дочерние элементы к текущему экземпляру HTMLNode, если у них нет родительского элемента.
Контекстный менеджер HTMLNode позволяет создавать иерархическую структуру элементов
в HTML-документе с помощью блоков with.

Класс HTML также позволяет динамически создавать дочерние элементы с помощью вызовов методов с названиями тегов.
"""
class HTMLNode:
    """
    HTMLNode - базовый класс для всех узлов HTML-дерева.

    Attributes:
        _parent (Optional[HTMLNode]): Родительский узел текущего узла HTML.
        _nodes (list[HTMLNode]): Список дочерних узлов текущего узла HTML.
        _ctx: Контекст текущего узла.
    """
    frame = ...
    _with_contexts = ...
    def __init__(self) -> None:
        ...
    
    def __enter__(self) -> HTMLNode:
        """
        Метод-контекстный менеджер для создания узла HTML.
        
        Returns:
            HTMLNode: Объект HTML-узла.
        """
        ...
    
    def __exit__(self, *_) -> None:
        """
        Метод, который вызывается при выходе из контекста создания узла.
        
        Args:
            _: Возвращает ничего.
        """
        ...
    
    @property
    def parent(self) -> Optional[HTMLNode]:
        """
        Getter-метод для получения родительского узла текущего узла HTML.
        
        Returns:
            Optional[HTMLNode]: Родительский узел текущего узла HTML.
        """
        ...
    
    @parent.setter
    def parent(self, value: HTMLNode) -> None:
        """
        Setter-метод для установки родительского узла текущего узла HTML.
        
        Args:
            value (HTMLNode): Родительский узел текущего узла HTML.
        
        Returns:
            None
        """
        ...
    
    def parent_setted_callback(self): # -> None:
        ...
    
    @property
    def layer(self) -> int:
        """
        Getter-метод для получения уровня текущего узла HTML.
        
        Returns:
            int: Уровень текущего узла HTML.
        """
        ...
    
    @property
    def root(self) -> HTMLNode:
        """
        Getter-метод для получения корневого узла текущего узла HTML.
        
        Returns:
            HTMLNode: Корневой узел текущего узла HTML.
        """
        ...
    
    def add_node_validation(self, new_node: HTMLNode) -> None:
        """
        Метод для проверки дочернего узла перед добавлением в текущий узел HTML.
        
        Args:
            new_node (HTMLNode): Новый дочерний узел, который нужно проверить.
        
        Returns:
            None
        """
        ...
    
    def add_node(self, new_node: HTMLNode) -> None:
        """
        Метод для добавления дочернего узла в текущий узел HTML.
        
        Args:
            new_node (HTMLNode): Новый дочерний узел, который нужно добавить.
        
        Returns:
            None
        """
        ...
    


class HTML(HTMLNode):
    """
    HTML - класс, представляющий HTML-элемент.

    Attributes:
        tag_name (str): имя тега элемента
        is_single (bool): флаг, указывающий, является ли элемент одиночным (например, <img>)
        is_text (bool): флаг, указывающий, является ли элемент текстовым
        _attrs (dict): словарь атрибутов элемента
        parent (HTML): родительский элемент
        root (HTML): корневой элемент
        _nodes (list): список дочерних элементов

    """
    def __init__(self, tag_name: str, attrs: Optional[dict] = ...) -> None:
        """
        Инициализирует экземпляр класса HTML.

        Args:
            tag_name (str): имя тега элемента
            attrs (dict, optional): словарь атрибутов элемента

        """
        ...
    
    def __repr__(self) -> str:
        """
        Возвращает строковое представление HTML-элемента.

        Returns:
            str: строковое представление HTML-элемента

        """
        ...
    
    def __getattr__(self, tag_name: str) -> Callable:
        """
        Возвращает функцию, которая создает новый HTML-элемент с указанным именем тега.

        Args:
            tag_name (str): имя тега

        Returns:
            Callable: функция, создающая новый HTML-элемент

        """
        ...
    
    @property
    def in_head(self) -> bool:
        """
        Проверяет, находится ли элемент внутри тега head.

        Returns:
            bool: True, если элемент находится внутри тега head, иначе False

        """
        ...
    
    @property
    def in_body(self) -> bool:
        """
        Проверяет, находится ли элемент внутри тега body.

        Returns:
            bool: True, если элемент находится внутри тега body, иначе False

        """
        ...
    
    def add_node_validation(self, new_node: HTML) -> None:
        """
        Проверяет, может ли новый HTML-элемент быть добавлен как дочерний элемент.

        Args:
            new_node (HTMLNode): новый HTML-элемент

        Raises:
            Exception: если у нового элемента уже есть родитель

        """
        ...
    
    def save(self, filename: str) -> Path:
        """
        Сохраняет HTML-документ в файл.

        Args:
            filename (str): имя файла

        Returns:
            Path: объект класса Path, представляющий путь к файлу

        """
        ...
    


